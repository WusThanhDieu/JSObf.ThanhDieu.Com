"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _order = require("../order");
var _traverse = require("../traverse");
var _compare = require("../util/compare");
var _gen = require("../util/gen");
var _insert = require("../util/insert");
var _transform = _interopRequireDefault(require("./transform"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Renames the labels to shorter names.
 */
class RenameLabels extends _transform.default {
  constructor(o) {
    super(o, _order.ObfuscateOrder.RenameLabels);
    _defineProperty(this, "gen", void 0);
    this.gen = this.getGenerator("randomized");
  }
  match(object, parents) {
    return object.type == "LabeledStatement";
  }
  transform(object, parents) {
    return () => {
      var newName = null;
      var isRemovable = object.body.type !== "BlockStatement";
      var labelNeverUsed = true;
      (0, _traverse.walk)(object, parents, (o, p) => {
        if (o.type == "BreakStatement" || o.type == "ContinueStatement") {
          function isContinuableStatement(x, stmtParents) {
            return (0, _compare.isLoop)(x) && x.type !== "SwitchStatement";
          }
          function isBreakableStatement(x, stmtParents) {
            return (0, _compare.isLoop)(x) || x.type == "BlockStatement" && o.label && stmtParents[0] && stmtParents[0].type == "LabeledStatement";
          }
          var fn = o.type == "ContinueStatement" ? isContinuableStatement : isBreakableStatement;
          var labelStatement = p.find((node, i) => {
            return fn(node, p.slice(i + 1));
          });
          if (o.label && o.label.name == object.label.name) {
            if (object.body == labelStatement && isRemovable) {
              // In same loop

              o.label = null;
            } else {
              if (!newName) {
                newName = this.gen.generate();
              }
              o.label = (0, _gen.Identifier)(newName);
              labelNeverUsed = false;
            }
          }
        }
      });
      if (newName) {
        object.label = (0, _gen.Identifier)(newName);
      } else if (isRemovable || labelNeverUsed) {
        this.replace(object, (0, _insert.clone)(object.body));
      }
    };
  }
}
exports.default = RenameLabels;