"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _transform = _interopRequireDefault(require("../transform"));
var _gen = require("../../util/gen");
var _insert = require("../../util/insert");
var _random = require("../../util/random");
var _order = require("../../order");
var _compare = require("../../util/compare");
var _assert = require("assert");
var _probability = require("../../probability");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class StringSplitting extends _transform.default {
  constructor(o) {
    super(o, _order.ObfuscateOrder.StringSplitting);
    _defineProperty(this, "joinPrototype", void 0);
    _defineProperty(this, "strings", void 0);
    _defineProperty(this, "adders", void 0);
    _defineProperty(this, "vars", void 0);
    this.joinPrototype = null;
    this.strings = Object.create(null);
    this.adders = [];
    this.vars = [];
  }
  match(object, parents) {
    return object.type == "Literal" && typeof object.value === "string" && object.value.length >= 8 && !(0, _compare.isModuleSource)(object, parents) && !(0, _compare.isDirective)(object, parents);
  }
  transform(object, parents) {
    return () => {
      var size = Math.round(Math.max(6, object.value.length / (0, _random.getRandomInteger)(3, 8)));
      if (object.value.length <= size) {
        return;
      }
      var chunks = (0, _random.splitIntoChunks)(object.value, size);
      if (!chunks || chunks.length <= 1) {
        return;
      }
      if (!(0, _probability.ComputeProbabilityMap)(this.options.stringSplitting, x => x, object.value)) {
        return;
      }
      var binaryExpression;
      var parent;
      var last = chunks.pop();
      chunks.forEach((chunk, i) => {
        if (i == 0) {
          parent = binaryExpression = (0, _gen.BinaryExpression)("+", (0, _gen.Literal)(chunk), (0, _gen.Literal)(""));
        } else {
          binaryExpression.left = (0, _gen.BinaryExpression)("+", (0, _insert.clone)(binaryExpression.left), (0, _gen.Literal)(chunk));
          (0, _assert.ok)(binaryExpression);
        }
      });
      parent.right = (0, _gen.Literal)(last);
      this.replaceIdentifierOrLiteral(object, parent, parents);
    };
  }
}
exports.default = StringSplitting;