"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Template;
var _parser = require("../parser");
var _assert = require("assert");
var _random = require("../util/random");
var _constants = require("../constants");
function Template() {
  for (var _len = arguments.length, templates = new Array(_len), _key = 0; _key < _len; _key++) {
    templates[_key] = arguments[_key];
  }
  (0, _assert.ok)(templates.length);
  var requiredVariables = new Set();
  var providedVariables = {};
  var defaultVariables = Object.create(null);

  // This may picked up "$mb[pP`x]" from String Encoding function
  // ignoreMissingVariables() prevents this
  var matches = templates[0].match(/{[$A-z0-9_]+}/g);
  if (matches !== null) {
    matches.forEach(variable => {
      var name = variable.slice(1, -1);

      // $ variables are for default variables
      if (name.startsWith("$")) {
        defaultVariables[name] = _constants.placeholderVariablePrefix + "td_" + Object.keys(defaultVariables).length;
      } else {
        requiredVariables.add(name);
      }
    });
  }
  function fill() {
    let variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);
    var userVariables = {
      ...providedVariables,
      ...variables
    };

    // Validate all variables were passed in
    for (var requiredVariable of requiredVariables) {
      if (typeof userVariables[requiredVariable] === "undefined") {
        throw new Error(templates[0] + " missing variable: " + requiredVariable + " from " + JSON.stringify(userVariables));
      }
    }
    var template = (0, _random.choice)(templates);
    var output = template;
    var allVariables = {
      ...defaultVariables,
      ...userVariables
    };
    Object.keys(allVariables).forEach(name => {
      var bracketName = "{" + name.replace("$", "\\$") + "}";
      var value = allVariables[name] + "";
      var reg = new RegExp(bracketName, "g");
      output = output.replace(reg, value);
    });
    return {
      output,
      template
    };
  }
  function compile(variables) {
    var {
      output,
      template
    } = fill(variables);
    try {
      var program = (0, _parser.parseSnippet)(output);
      return program.body;
    } catch (e) {
      console.error(e);
      console.error(template);
      console.error({
        ...providedVariables,
        ...variables
      });
      throw new Error("Template failed to parse: OUTPUT= " + output + " SOURCE= " + template);
    }
  }
  function single(variables) {
    var nodes = compile(variables);
    return nodes[0];
  }
  function variables(newVariables) {
    Object.assign(providedVariables, newVariables);
    return obj;
  }
  function ignoreMissingVariables() {
    defaultVariables = Object.create(null);
    requiredVariables.clear();
    return obj;
  }
  var obj = {
    fill,
    compile,
    single,
    templates,
    variables,
    ignoreMissingVariables,
    source: templates[0]
  };
  return obj;
}